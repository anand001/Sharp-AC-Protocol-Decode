#include <jendefs.h>
#include <AppHardwareApi.h>
#include <AppQueueApi.h>

#include "clock.h"  
#include "node.h"	
#include "task.h"		

#include "sendToPc.h"
#include "dio.h"
#include "tmpSensor.h"
#include "lightSensor.h"
#include "mac.h"

#define USER_PACKET_TYPE 0x67

int flag=0,flag1=0,flag2=0;
int count=0,count1=0,count2=0;
int index=0, current_state=0, reset=0;
int payload_receive;


int Power_On[]={2500,3750,1850,500,400,500,1350,550,400,500,1350,500,450,500,1350,550,400,500,1350,500,450,500,1350,500,450,500,1350,500,1350,500,450,500,1350,500,450,500,1350,500,1400,450,1400,500,1350,500,450,500,400,500,1400,450,1400,500,450,500,400,550,400,500,450,500,1350,500,400,550,400,500,450,500,400,500,450,500,450,450,400,500,450,450,450,500,450,500,450,450,1400,500,400,500,450,500,450,500,1350,500,450,500,400,500,450,500,350,550,400,500,400,550,400,500,450,450,1400,500,450,450,450,550,400,500,450,500,400,500,450,500,400,500,450,500,450,500,400,550,400,500,450,500,400,550,1350,500,400,500,450,500,400,550,400,500,450,500,400,500,450,500,450,450,450,550,400,500,400,500,1400,500,450,500,400,500,450,500,400,500,450,500,450,500,400,500,450,500,450,450,450,550,400,500,450,500,1350,500,1400,450,1400,500,1350,500,1400,500,400,550,400,500,450,500,1400,500,450,500,400,500,350,500,1000};

int Power_Off[]={2500,3750,1850,500,400,500,1350,550,400,500,1350,500,450,500,1350,550,400,500,1350,500,450,500,1350,500,450,500,1350,500,1350,500,450,500,1350,500,450,500,1350,500,1400,450,1400,500,1350,500,450,500,400,500,1400,450,1400,500,450,500,400,550,400,500,450,500,1350,500,400,550,400,500,450,500,400,500,450,500,450,450,400,500,450,450,450,500,450,500,450,450,1400,500,400,500,450,500,450,500,350,500,1450,500,400,500,450,500,350,550,400,500,400,550,400,500,450,450,1400,500,450,450,450,550,400,500,450,500,400,500,450,500,400,500,450,500,450,500,400,550,400,500,450,500,400,550,1350,500,400,500,450,500,400,550,400,500,450,500,400,500,450,500,450,450,450,550,400,500,400,500,1400,500,450,500,400,500,450,500,400,500,450,500,450,500,400,500,450,500,450,450,450,550,400,500,450,500,1350,500,1400,450,1400,500,1350,500,1400,500,400,550,400,500,450,500,400,500,1450,500,400,500,350,500,1000};

int on[]={2500,3750,1850,500,400,500,1350,550,400,500,1350,500,450,500,1350,550,400,500,1350,500,450,500,1350,500,450,500,1350,500,1350,500,450,500,1350,500,450,500,1350,500,1400,450,1400,500,1350,500,450,500,400,500,1400,450,1400,500,450,500,400,550,400,500,450,500,1350,500,400,550,400,500,450,500,400,500,1450,500,450,450,1400,500,450,450,450,500,1450,500,1450,450,1400,500,400,500,450,500,450,500,1350,500,1450,500,400,500,450,500,350,550,1400,500,400,550,400,500,450,450,1400,500,450,450,450,550,400,500,450,500,400,500,450,500,400,500,450,500,450,500,400,550,1400,500,1450,500,1400,550,1350,500,400,500,450,500,400,550,400,500,450,500,400,500,450,500,450,450,450,550,400,500,400,500,1400,500,450,500,1400,500,1450,500,400,500,450,500,450,500,400,500,450,500,450,450,450,550,350,500,450,500,1350,500,1400,450,1400,500,1350,500,1400,500,400,550,400,500,450,500,400,500,1450,500,1400,500,500,500,1000};

void led_switch(uint32 u32DeviceId, uint32 u32ItemBitmap)
{
if(count1%2==0)
    {
   //    debug("here",4);
        count1=1;
       ledOff();
    }
else
    {
      //  debug("here",3);
        count1=2;
        ledOn();
    }
}

void counter_function(uint32 u32DeviceId, uint32 u32ItemBitmap)
{
count=count+1;;
  if(count==1)
    {
 //  debug("here1",5);
       vAHI_TimerEnable(E_AHI_TIMER_1,0,TRUE,TRUE,FALSE);
       vAHI_TimerStartRepeat(E_AHI_TIMER_1,140,421);
       vAHI_Timer1RegisterCallback(led_switch);
//ledOn();
    }
   else
    {
        index=index+2;
        count=0;
        ledOff();
      vAHI_TimerDisable(E_AHI_TIMER_1);
      vAHI_TimerDisable(E_AHI_TIMER_2);
//debug("here2",5);

            if(index<212 )
			{
                vAHI_TimerEnable(E_AHI_TIMER_2,4,TRUE,TRUE,FALSE);

	if(payload_receive==1)
		{
    vAHI_TimerStartSingleShot(E_AHI_TIMER_2,Power_On[index],Power_On[index]+Power_On[index+1]);
		}
	if(payload_receive==2)
		{    
vAHI_TimerStartSingleShot(E_AHI_TIMER_2,Power_Off[index],Power_Off[index]+Power_Off[index+1]);
		}
	if(payload_receive==3)
		{    
vAHI_TimerStartSingleShot(E_AHI_TIMER_2,on[index],on[index]+on[index+1]);
		}
    vAHI_Timer2RegisterCallback(counter_function);
			}
            else
                {

                  vAHI_TimerDisable(E_AHI_TIMER_1);
                    vAHI_TimerDisable(E_AHI_TIMER_2);
                   debug("here2.2",7);
                   ledOff();
                   index=0;
					count=0;

                }
    }

}



void AC_Power_On()
{
ledOff();
    vAHI_TimerEnable(E_AHI_TIMER_2,4,TRUE,TRUE,FALSE);
    vAHI_TimerStartSingleShot(E_AHI_TIMER_2,Power_On[index],Power_On[index]+Power_On[index+1]);
    vAHI_Timer2RegisterCallback(counter_function);
}

void AC_Power_Off()
{
ledOff();
    vAHI_TimerEnable(E_AHI_TIMER_2,4,TRUE,TRUE,FALSE);
    vAHI_TimerStartSingleShot(E_AHI_TIMER_2,Power_Off[index],Power_Off[index]+Power_Off[index+1]);
    vAHI_Timer2RegisterCallback(counter_function);
}

void AC_Swing()
{
ledOff();
    vAHI_TimerEnable(E_AHI_TIMER_2,4,TRUE,TRUE,FALSE);
    vAHI_TimerStartSingleShot(E_AHI_TIMER_2,on[index],on[index]+on[index+1]);
    vAHI_Timer2RegisterCallback(counter_function);
}


void startNode()
{
ledOff();
sendToPcInit();
macInit();


}

void userTaskHandler(uint8 taskType)
{

}

void userReceiveDataPacket(uint8* payload,uint8 length,uint16 prevAddr,uint8 linkQuality)
{
	int Node_Id_High_Receive, Node_Id_Low_Receive, Node_Id_Receive;
	
//	Node_Id_High_Receive=payload[2]<<8;
//	Node_Id_Low_Receive=payload[3];
//	Node_Id_Receive= Node_Id_High_Receive + Node_Id_Low_Receive;
//	uint16 NodeId=getNodeId();
// && NodeId==Node_Id_Receive		
	if(payload[0]==USER_PACKET_TYPE )
	{
		payload_receive=payload[1];
     if(payload[1]==1)
			AC_Power_On();
     else if(payload[1]==2)
			AC_Power_Off();
	 else if(payload[1]==3)
			AC_Swing();
	 else if(payload[1]==4)
			AC_Swing();
	
	ledOn();
	}
}

void userCriticalTaskHandler(uint8 critTaskType)
{

}


